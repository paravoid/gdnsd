From a395264dcc1734a930706462a380f19e3e2f389a Mon Sep 17 00:00:00 2001
From: Faidon Liambotis <paravoid@debian.org>
Date: Tue, 1 Aug 2023 16:52:44 +0300
Subject: [PATCH] tests: fix AXFR-related Net::DNS 1.39 breakage

Net::DNS 1.39 made axfr() ignore the "persistent_tcp" setting, which
means that the socket is closed right after the AXFR, which in turn
increases tcp_close_c.

This was previously not the case, and hence the 003complex/009broken.t
tests right after the AXFR (7 onwards) fail with:
  # Stats check: Stats check failed: tcp_close_c mismatch (hard-fail), wanted 0, got 1

Add tcp_close_c to the AXFR test's stats_inc, which resolves this issue
for 1.39+.

To ensure backwards-compatibility with older versions, also add some
code to turn off persistent_tcp() before the axfr() call, and restore it
to its previous state right after (currently always 1).

Fixes #236
---
 t/003complex/009broken.t | 11 ++++++++++-
 1 file changed, 10 insertions(+), 1 deletion(-)

--- a/t/003complex/009broken.t
+++ b/t/003complex/009broken.t
@@ -40,9 +40,18 @@ my $pid = _GDT->test_spawn_daemon();
 
 {   # AXFR - stats result should be NOTIMP over TCP
     my @zone = ();
+    # Net::DNS 1.39 made axfr() ignore the persistent_tcp setting,
+    # which means the socket is closed, and in turn tcp_close_c increases.
+    #
+    # To ensure backwards-compatibility with older versions, turn off
+    # persistent_tcp before axfr() and restore it to its previous state
+    # (currently always 1).
+    my $saved = _GDT->get_resolver()->persistent_tcp;
+    _GDT->get_resolver()->persistent_tcp(0);
     eval { @zone = _GDT->get_resolver()->axfr('example.com'); };
+    _GDT->get_resolver()->persistent_tcp($saved);
     ok(!scalar @zone) or diag "AXFR gave us records???";
-    _GDT->stats_inc(qw/tcp_reqs tcp_conns notimp/);
+    _GDT->stats_inc(qw/tcp_reqs tcp_conns tcp_close_c notimp/);
     _GDT->test_stats();
 }
 
